
transform_to_ring(Term, Filename) =>
    ResultStr = transform(Term),
    write_file(Filename, ResultStr).

transform(Term) = Result, (atom(Term); string(Term)) =>
    Q = ['],
    Result = Q ++ to_string(Term) ++ Q.

transform(Term) = Result, number(Term) =>
    StrVal = to_string(Term),
    Q = ['],
    if find(StrVal, "e", _, _); find(StrVal, "E", _, _) then
        Result = Q ++ StrVal ++ Q
    else
        Result = StrVal
    end.

transform(true) = "TRUE".
transform(false) = "FALSE".

transform(List) = Result, list(List), not struct(List) =>
    Items = [transform(Item) : Item in List],
    Result = "[" ++ join(Items, ", ") ++ "]".

transform(Struct) = Result, struct(Struct) =>
    Pairs = [transform_struct_pair(I, Struct) : I in 1..length(Struct)],
    Result = "[" ++ join(Pairs, ", ") ++ "]".

transform(_) = "NULL".

transform_struct_pair(I, Struct) = Result =>
    Key = name(Struct[I]),
    Value = Struct[I],
    KeyStr = transform(Key),
    ValStr = transform(Value),
    Result = "[" ++ KeyStr ++ ", " ++ ValStr ++ "]".

join([], _Sep) = "".
join([H], _Sep) = H.
join([H|T], Sep) = H ++ Sep ++ join(T, Sep).

write_file(Filename, Content) =>
    FD = open(Filename, write),
    print(FD, Content),
    close(FD).


main =>
    println("Picat program starting..."),

res = [1, 2, 3, 4, 5]
,
    println("Result created"),
    println(res),
    println("Transforming result..."),
    transform_to_ring(res, "piresult.txt"),
    println("Data written to file").
